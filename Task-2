import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all(cell == player for cell in board[i]):  # Check rows
            return True
        if all(board[j][i] == player for j in range(3)):  # Check columns
            return True
    if all(board[i][i] == player for i in range(3)):  # Main diagonal
        return True
    if all(board[i][2 - i] == player for i in range(3)):  # Anti-diagonal
        return True
    return False

def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

def minimax(board, depth, is_maximizing, player, opponent):
    if check_winner(board, player):
        return 10 - depth  # AI wins
    if check_winner(board, opponent):
        return depth - 10  # Opponent wins
    if is_full(board):
        return 0  # Draw

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = player
                    eval = minimax(board, depth + 1, False, player, opponent)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = opponent
                    eval = minimax(board, depth + 1, True, player, opponent)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

def best_move(board, player, opponent):
    best_score = float('-inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = player
                score = minimax(board, 0, False, player, opponent)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 0

    print("Welcome to Tic-Tac-Toe!")
    print("You are 'X' and AI is 'O'.")
    print_board(board)

    while True:
        if current_player == 0:  # Human's turn (Player X)
            print(f"Player {players[current_player]}'s turn.")
            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter column (0-2): "))
            except ValueError:
                print("Invalid input. Please enter numbers between 0 and 2.")
                continue

            if 0 <= row < 3 and 0 <= col < 3:
                if board[row][col] == ' ':
                    board[row][col] = players[current_player]
                    print_board(board)

                    if check_winner(board, players[current_player]):
                        print(f"Player {players[current_player]} wins!")
                        break
                    elif is_full(board):
                        print("It's a draw!")
                        break
                    else:
                        current_player = 1 - current_player  # Switch to AI's turn
                else:
                    print("Cell is already taken! Try again.")
            else:
                print("Invalid row or column. Please try again.")
        else:  # AI's turn (Player O)
            print(f"Player {players[current_player]}'s turn.")
            move = best_move(board, players[current_player], players[1 - current_player])
            board[move[0]][move[1]] = players[current_player]
            print(f"AI chooses: Row {move[0]} Column {move[1]}")
            print_board(board)

            if check_winner(board, players[current_player]):
                print(f"Player {players[current_player]} wins!")
                break
            elif is_full(board):
                print("It's a draw!")
                break
            else:
                current_player = 1 - current_player  # Switch to Human's turn

if __name__ == "__main__":
    tic_tac_toe()
