import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Sample movie dataset
data = {
    'movie_id': [1, 2, 3, 4, 5],
    'title': ['The Matrix', 'John Wick', 'Interstellar', 'The Notebook', 'Inception'],
    'genre': ['Action Sci-Fi', 'Action Thriller', 'Sci-Fi Drama', 'Romance Drama', 'Action Sci-Fi']
}

# Create a DataFrame
df = pd.DataFrame(data)

# Vectorize the genre text
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['genre'])

# Compute the cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Create a reverse map of movie titles to indices
indices = pd.Series(df.index, index=df['title']).drop_duplicates()

# Recommendation function
def recommend(title, cosine_sim=cosine_sim):
    if title not in indices:
        return "Movie not found in database."
    
    idx = indices[title]
    
    # Get pairwise similarity scores
    sim_scores = list(enumerate(cosine_sim[idx]))
    
    # Sort by similarity score
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    
    # Get scores of the 3 most similar movies
    sim_scores = sim_scores[1:4]  # exclude the movie itself
    
    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]
    
    # Return the top 3 most similar movies
    return df['title'].iloc[movie_indices].tolist()

# Example usage
print("Recommendations for 'The Matrix':")
print(recommend('The Matrix'))

print("\nRecommendations for 'The Notebook':")
print(recommend('The Notebook'))
